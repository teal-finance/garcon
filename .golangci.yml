version: "2"

# Documentation:
# https://golangci-lint.run/usage/configuration/#run-configuration

# Run the last version:
# go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest run --fix

# List the available linters:
# go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest linters --no-config --color always

---

linters:
  default: all

  disable:
  - nlreturn
  - wsl
  - wsl_v5

  enable:
    - arangolint
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - canonicalheader
    - containedctx
    - contextcheck
    - copyloopvar
    - cyclop
    - decorder
    - depguard
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - embeddedstructfieldcheck
    - err113
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    - exhaustruct
    - exptostd
    - fatcontext
    - forbidigo
    - forcetypeassert
    - funcorder
    - funlen
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goheader
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosmopolitan
    - govet
    - grouper
    - iface
    - importas
    - inamedparam
    - ineffassign
    - interfacebloat
    - intrange
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - mnd
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnesserr
    - nilnil
    - noctx
    - noinlineerr
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - recvcheck
    - revive
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - tagalign
    - tagliatelle
    - testableexamples
    - testifylint
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - zerologlint

linters-settings:

  bodyclose:
    no-default-checks: false

  canonicalheader:
    canonical-headers: []

  copyloopvar:
    check-alias: true

  depguard:
    rules:
      deny: null

  dupl:
    threshold: 94

  durationcheck:
    check-multiplication: true

  embeddedstructfieldcheck:
    allow-empty-line: true

  errcheck:
    check-blank: false
    check-type-assertions: false

  errchkjson:
    check-struct-tag: true

  errname:
    check-func-errors: true
    check-named-errors: true

  errorlint:
    asserts: true
    comparison: true
    errorf: true

  exhaustive:
    check-generated: false

  exhaustruct:
    ignore-structs: []
    include: []
    exclude:
      - "Perm$"

  exptostd:
    ignore: []

  fatcontext:
    max-context-nesting: 3

  forbidigo:
    forbid:
      - msg: Use logger instead of fmt.Print
        pattern: ^fmt\.Print.*$
      - msg: Use logger instead of log
        pattern: ^log\..*$

  forcetypeassert:
    check-all: true

  funcorder:
    order: ["init", "main", "Setup", "TearDown", "Test", "Benchmark", "Example"]

  funlen:
    lines: 100
    statements: 50

  gochecknoglobals:
    allow: []

  gochecknoinits:
    skip: []

  gochecksumtype:
    check-all: true

  gocyclo:
    min-complexity: 10

  cyclop:
    max-complexity: 10
    skip-test: true

  gocognit:
    min-complexity: 18

  goconst:
    min-len: 2
    min-occurrences: 5

  gocritic:
    enabled-checks: all
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - captLocal
      - unnamedResult
    # - dupImport # https://github.com/go-critic/go-critic/issues/845
    # - ifElseChain
    # - octalLiteral
      - whyNoLint
    # - wrapperFunc
    # - yodaStyleExpr
    # - singleCaseSwitch # Every time this occurred in the code, there was no other way.

    settings:
      captureruneverywhere:
        params-only: true
      exitafterreturn:
        allow-comment: true
      hugeparam:
        threshold: 10
      ifelsechain:
        max-chains: 3
      longchain:
        max-len: 5
      nestingreduce:
        max-depth: 5
      rangevalcopy:
        threshold: 512
      sliceinit:
        max-size: 100
      stringintconv:
        ignore-string-representation: true

  godot:
    scope: declarations

  godox:
    keywords: ["TODO", "FIXME", "BUG", "HACK"]

  gomoddirectives:
    replace-allowlist:
      - github.com/owner/repo v1.0.0

  gomodguard:
    rules:
      deny:
        - path: ^gopkg.in/
          reason: use newer go modules
        - path: ^github.com/golang/protobuf
          reason: use newer go modules

  goprintffuncname:
    check-func-names: []

  gosec:
    confidence: medium
    excludes:
      - G104
    nosec: ''
    severity: medium

  gosmopolitan:
    allow-time: false
    allow-time-utc: false
    check-timezone: true

  govet:
    check-shadowing: true
    enable-all: true
    settings:
      shadow:
        strict: true
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  iface:
    allow-empty-interface: false
    allow-single-method: false

  importas:
    alias:
      - alias: errors
        pkg: github.com/pkg/errors
      - alias: ctx
        pkg: context

  inamedparam:
    ignore-empty: false

  interfacebloat:
    max-methods: 10

  intrange:
    check-range: true

  lll:
    line-length: 160

  loggercheck:
    kitsune: true
    klog: true
    logr: true
    slog: true
    zap: true

  makezero:
    always: false

  maligned:
    suggest-new: true
    suggest-new-order: true

  mirror:
    check-all: true

  misspell:
    locale: US

  musttag:
    rules: []

  nakedret:
    max-func-lines: 15

  nestif:
    max-nesting: 5

  nilerr:
    check-all: true

  nilnesserr:
    check-all: true

  nlreturn:
    max-lines: 2

  noctx:
    check-all: true

  noinlineerr:
    check-all: true

  nolintlint:
    allow-leading-space: false # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: true # require nolint directives to be specific about which linter is being skipped

  nonamedreturns:
    check-all: true

  nosprintfhostport:
    check-all: true

  paralleltest:
    ignore-missing: false

  perfsprint:
    ignore: []

  prealloc:
    for-loops: true
    range-loops: true
    simple: true

  predeclared:
    ignore: ''

  promlinter:
    strict: false

  protogetter:
    check-all: true

  reassign:
    check-global: true
    check-local: true

  recvcheck:
    check-all: true

  revive:
    config:
      - rule-name: blank-imports
        severity: warning
      - rule-name: context-as-argument
        severity: warning
      - rule-name: context-keys-type
        severity: warning
      - rule-name: dot-imports
        severity: warning
      - rule-name: error-return
        severity: warning
      - rule-name: error-naming
        severity: warning
      - rule-name: if-return
        severity: warning
      - rule-name: var-naming
        severity: warning
    enable-all-rules: true

  rowserrcheck:
    check-all: true
    packages:
      - database/sql
      - github.com/jackc/pgx/v4

  sloglint:
    args-on-separate-lines: true
    context: all
    key-value-braces: true

  spancheck:
    check-all: true

  sqlclosecheck:
    packages:
      - database/sql
      - github.com/jackc/pgx/v4

  staticcheck:
    go: "1.24"
    # https://staticcheck.io/docs/options#checks
    checks: all

  tagalign:
    order: align
    style: same

  tagliatelle:
    check-all: true
    ignore: []
    case:
      rules:
        json: snake # could be "goCamel"

  # https://github.com/butuzov/ireturn
  # https://golangci-lint.run/usage/linters/#ireturn
  ireturn:
    allow:
      - anon # anonymous interfaces such as: interface{Stop()}
      - error # error interface
      - stdlib # standard library interfaces
      - github.com/prometheus\/client_golang\/prometheus.Gauge
      - github.com/prometheus\/client_golang\/prometheus.Counter

  testableexamples:
    check-all: true

  testifylint:
    disable-all: false
    enable:
      - bool-compare
      - compares
      - empty
      - error-is-as
      - error-nil
      - expected-actual
      - go-require
      - float-compare
      - len
      - nil-compare
      - require-error
      - suite-extra-assert-call
      - suite-thelper

  testpackage:
    suffix: _test

  thelper:
    allow: []

  tparallel:
    check-all: true
    ignore-missing: false

  unconvert:
    check-all: true

  unparam:
    check-exported: false

  unused:
    check-exported: false

  usestdlibvars:
    allow-all: false
    ignore:
      - os.O_WRONLY
      - os.O_RDWR

  usetesting:
    allow:
      - testing.T
      - testing.B
      - testing.F

  varnamelen:
    ignore: []
    min-length: 2
    # The longest distance, in source lines, that is being considered a "small scope".
    # Variables used in at most this many lines will be ignored.
    # Default: 5
    max-distance: 14
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 3
    min-name-length: 2
    # Check method receivers.
    # Default: false
    check-receiver: false
    # Check named return values.
    # Default: false
    check-return: true
    # Check type parameters.
    # Default: false
    check-type-param: true
    # Ignore "ok" variables that hold the bool return value of a type assertion.
    # Default: false
    ignore-type-assert-ok: false
    # Ignore "ok" variables that hold the bool return value of a map index.
    # Default: false
    ignore-map-index-ok: false
    # Ignore "ok" variables that hold the bool return value of a channel receive.
    # Default: false
    ignore-chan-recv-ok: false
    # Optional list of variable names that should be ignored completely.
    # Default: []
    ignore-names:
      - err
      - r # request
      - w # writer
      - g # garcon
      - u # url
      - d # duration
    # Optional list of variable declarations that should be ignored completely.
    # Entries must be in one of the following forms (see below for examples):
    # - for variables, parameters, named return values, method receivers, or type parameters:
    #   <name> <type>  (<type> can also be a pointer/slice/map/chan/...)
    # - for constants: const <name>
    #
    # Default: []
    ignore-decls:
      - t testing.T
      - f *foo.Bar
      - e error
      - i int
      - const C
      - T any
      - m map[string]int

  wastedassign:
    check-all: true

  whitespace:
    blank-lines: true
    multi-assign: true
    multi-if: true
    space-around-braces: true
    space-around-comment: true
    space-around-operator: true
    space-around-parentheses: true

  wrapcheck:
    ignore-interface-regexps:
      - ^(?i)error$
    ignore-package-globs:
      - errors/*
      - fmt/*
    ignore-sigs:
      - errors.New(
      - errors.New(
      - fmt.Errorf(

  wsl_v5:
    allow-trailing-comma: true
    strict: true

  zerologlint:
    check-event: true
    check-log: true


issues:
  exclude-rules:
    # Excluding configuration per-path
    - path: _test\.go
      linters:
        - gosec # weak random number generator (math/rand instead of crypto/rand)
        - scopelint
        # gocyclo
        # errcheck
        # dupl
        # unparam
        # staticcheck

    # Excluding configuration per-linter
    - linters:
        - gocritic
      text: "unnecessaryDefer:"

    # Excluding configuration per-text and per-source
    - text: "exitAfterDefer:"
      linters:
        - gocritic


run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 9m
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs: [poc]
  go: "1.24"
  timeout: 5m


output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # sorts results by: filepath, line and column
  sort-results: true
