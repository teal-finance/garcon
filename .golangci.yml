# Run the last version:
# go run github.com/golangci/golangci-lint/cmd/golangci-lint@latest run
# https://golangci-lint.run/usage/configuration/#run-configuration
run:
  skip-dirs:
    - vendor
    - poc
  go: '1.18'
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 10m

# List the available linters:
# go run github.com/golangci/golangci-lint/cmd/golangci-lint@latest linters --no-config
linters:

  enable-all: true

  disable:

    # DEPRECATED
    - exhaustivestruct # replaced by exhaustruct (checks if all struct's fields are initialized)
    - golint           # v1.41 replaced by revive formater
    - interfacer       # v1.38 archived by the owner (suggests narrower interface types)
    - maligned         # v1.38 replaced by govet 'fieldalignment' (detect Go structs that would take less memory if their fields were sorted)
    - scopelint        # v1.39 replaced by exportloopref (checks for unpinned variables in go programs)

    # ANNOYING
    - execinquery      # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - gci              # Gci controls golang package import order and makes it always deterministic.
    - gochecknoglobals # check that no global variables exist
    - goerr113         # Golang linter to check the errors handling expressions
    - gomnd            # An analyzer to detect magic numbers.
    - lll              # Reports long lines
    - nlreturn         # nlreturn checks for a new line before return and branch statements to increase code clarity
    - nonamedreturns   # Reports all named returns
    - varnamelen       # checks that the length of a variable's name matches its scope
    - wrapcheck        # Checks that errors returned from external packages are wrapped
    - wsl              # Whitespace Linter - Forces you to use empty lines!

linters-settings:

  goimports:
    local-prefixes: github.com/teal-finance/rainbow

  # https://github.com/mvdan/gofumpt
  gofumpt:
    lang-version: '1.18'
    extra-rules: true

  gosimple:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  staticcheck:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  stylecheck:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: ["200", "400", "404", "500"]

  tagliatelle:
    case:
      rules:
        json: snake # should also be "goCamel"

  # https://github.com/butuzov/ireturn
  # https://golangci-lint.run/usage/linters/#ireturn
  ireturn:
    allow:
      - anon    # anonymous interfaces such as: interface{Stop()}
      - error   # error interface
      - stdlib  # standard library interfaces
      - github.com/prometheus\/client_golang\/prometheus.Gauge
      - github.com/prometheus\/client_golang\/prometheus.Counter

output:
  format: tab
  sort-results: true  # sorts results by: filepath, line and column
