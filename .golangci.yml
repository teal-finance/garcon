# List the available linters:
# go run github.com/golangci/golangci-lint/cmd/golangci-lint@latest linters --no-config

# Run the last version:
# go run github.com/golangci/golangci-lint/cmd/golangci-lint@latest run

# Documentation:
# https://golangci-lint.run/usage/configuration/#run-configuration
---
modules-download-mode: readonly

run:
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, data$, examples$, builtin$
  skip-dirs:
    - vendor
    - poc
  go: "1.17"
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 10m


linters:
  enable-all: true

  disable:
    # DEPRECATED
    - exhaustivestruct
    - golint
    - interfacer
    - maligned
    - scopelint
    # ANNOYING
    - exhaustruct
    - gci
    - gochecknoglobals
    - goerr113
    - gosec
    - nlreturn
    - nonamedreturns
    - testpackage
    - varnamelen
    - wrapcheck
    - wsl

linters-settings:
  dupl:
    threshold: 94

  funlen:
    lines: 100
    statements: 50

  gocyclo:
    min-complexity: 17

  cyclop:
    max-complexity: 18

  gci:
    sections: [prefix(github.com/teal-finance/)]

  goconst:
    min-len: 2
    min-occurrences: 5

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - captLocal
      - unnamedResult
    # - dupImport # https://github.com/go-critic/go-critic/issues/845
    # - ifElseChain
    # - octalLiteral
    # - whyNoLint
    # - wrapperFunc
    # - yodaStyleExpr
    # - singleCaseSwitch # Every time this occurred in the code, there was no other way.

  # https://github.com/mvdan/gofumpt
  gofumpt:
    lang-version: "1.18"
    extra-rules: true

  goimports:
    local-prefixes: github.com/teal-finance/

  golint:
    min-confidence: 0

  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign,argument,case,condition"
        checks: [return]

  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  lll:
    line-length: 160

  maligned:
    suggest-new: true

  misspell:
    locale: US

  nolintlint:
    allow-leading-space: false # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: true # don't require nolint directives to be specific about which linter is being skipped

  gosimple:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  staticcheck:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  stylecheck:
    go: "1.18"
    # https://staticcheck.io/docs/options#checks
    checks:
      ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms:
      [
        "ACL",
        "API",
        "ASCII",
        "CPU",
        "CSS",
        "DNS",
        "EOF",
        "GUID",
        "HTML",
        "HTTP",
        "HTTPS",
        "ID",
        "IP",
        "JSON",
        "QPS",
        "RAM",
        "RPC",
        "SLA",
        "SMTP",
        "SQL",
        "SSH",
        "TCP",
        "TLS",
        "TTL",
        "UDP",
        "UI",
        "GID",
        "UID",
        "UUID",
        "URI",
        "URL",
        "UTF8",
        "VM",
        "XML",
        "XMPP",
        "XSRF",
        "XSS",
      ]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: ["200", "400", "404", "500"]

  tagliatelle:
    case:
      rules:
        json: snake # could be "goCamel"

  # https://github.com/butuzov/ireturn
  # https://golangci-lint.run/usage/linters/#ireturn
  ireturn:
    allow:
      - anon # anonymous interfaces such as: interface{Stop()}
      - error # error interface
      - stdlib # standard library interfaces
      - github.com/prometheus\/client_golang\/prometheus.Gauge
      - github.com/prometheus\/client_golang\/prometheus.Counter

issues:
  exclude-rules:
    # Excluding configuration per-path
    - path: _test\.go
      linters:
        # gomnd
        - gosec # weak random number generator (math/rand instead of crypto/rand)
        - scopelint
        # gocyclo
        # errcheck
        - dupl
        # unparam
        # staticcheck

    # Excluding configuration per-linter
    - linters:
        - gocritic
      text: "unnecessaryDefer:"

    # Excluding configuration per-text and per-source
    - text: "exitAfterDefer:"
      linters:
        - gocritic

output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # sorts results by: filepath, line and column
  sort-results: true
